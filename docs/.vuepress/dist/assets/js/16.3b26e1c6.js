(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{367:function(s,e,o){"use strict";o.r(e);var t=o(25),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,o=s._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[o("h1",{attrs:{id:"storage-8-11-node"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#storage-8-11-node"}},[s._v("#")]),s._v(" Storage 8.11 node")]),s._v(" "),o("h2",{attrs:{id:"相同点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[s._v("#")]),s._v(" 相同点")]),s._v(" "),o("p",[s._v("三者可以被用来在浏览器端存储数据，而且都是字符串类型的键值对。")]),s._v(" "),o("h2",{attrs:{id:"cookie"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),o("p",[s._v("大小限制4KB左右。一般由服务器生成，可设置失效时间，如果在浏览器生成，默认是关闭浏览器之后生效。参与服务器通信，一般放在HTTP头部，不易保存过多数据在cookie中，影响和服务器通信的性能。")]),s._v(" "),o("h2",{attrs:{id:"localstorage"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[s._v("#")]),s._v(" localStorage")]),s._v(" "),o("p",[s._v("一般5MB左右，将部分数据存放在浏览器本地，存在时间永久，除非人为手动删除。 用于缓存数据，不参与和服务器的通信")]),s._v(" "),o("h2",{attrs:{id:"sessionstorage"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[s._v("#")]),s._v(" sessionStorage")]),s._v(" "),o("p",[s._v("一般5MB左右，将一部分数据在当前会话中保存下来，刷新页面后数据依旧存在，当页面关闭后，Session也会清空。 用于缓存数据，不参与和服务器的通信。")]),s._v(" "),o("h2",{attrs:{id:"cookie-和-session"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session"}},[s._v("#")]),s._v(" cookie 和 session")]),s._v(" "),o("h3",{attrs:{id:"session"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),o("h4",{attrs:{id:"session为何物？"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session为何物？"}},[s._v("#")]),s._v(" session为何物？")]),s._v(" "),o("p",[s._v("session是由cookie进行标记的。当需要记住用户时，比如说登录，在服务端会设置一个响应头Set-Cookie，返回给客户端，例如：Set-Cookie:SESSIONID=12345678；客户端接收到这个响应后，此后发送的每一个请求浏览器都会自动带上Cookie请求头，对应内容是Cookie:SESSIONID=12345678。在服务端内存中存有session，将客户端发送的请求中的cookie值与内存中的session进行对比，就可以识别这个客户端了。"),o("br"),s._v("\n但是这又会引发新的问题。"),o("br"),s._v("\n如果用session在服务端进行存储，会出现的情况是，在一个处理淘宝业务的服务器集群中，不同的服务器被分配处理的业务不同，他们都处于淘宝这个大域名下，每台服务器的内存中都保留着一份同样的session，这就涉及到服务器之间session的复制。如若有100台服务器，每台服务器都有着同样的session，那么session所占用的内存之多可以想象。服务器既要处理业务，还得维护session的同步，如此一来，服务器无法通过增加业务的方式进行扩张，不易进行横向扩展  。"),o("br"),s._v("\n解决办法：将有状态的服务转化为无状态的服务"),o("br"),s._v("\n（1）共享session"),o("br"),s._v("\n将session提取出来，集中存放（有点像开辟了一个session数据库的赶脚。。）"),o("br"),s._v("\n（2）token"),o("br"),s._v("\n服务是不需要进行存储，服务可以通过解析token里面的信息来判断是否登陆。token 里面是可以携带cookie解析出来的信息的。这种情况下，去掉了服务器存储的负担，只需要每次在服务端对token增加一个校验就可以了。")]),s._v(" "),o("p",[s._v("在学习session这块的同时，注意到，在高并发情况下，集群中服务器的分布是可以加以设计和优化的。就拿双十一的淘宝，同时那么多人访问，仍旧坚挺着，这是为什么？当业务量巨大的时候，同一个域名底下可以有一堆服务器处理大量复杂的业务，防止网站崩溃；这个时候就需要进行负载均衡的设计了")])])}),[],!1,null,null,null);e.default=a.exports}}]);